"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sequelize_1 = __importDefault(require("sequelize"));
const chai_1 = __importStar(require("chai"));
const sinon_chai_1 = __importDefault(require("sinon-chai"));
const database_1 = __importDefault(require("./database"));
const resource_1 = __importDefault(require("./resource"));
const index_js_1 = __importDefault(require("../models/index.js"));
chai_1.default.use(sinon_chai_1.default);
const config = require('../config/config');
describe('Database', () => {
    before(function () {
        this.sequelize = new sequelize_1.default(config[process.env.NODE_ENV]);
        this.sequelize.define('User', {
            firstName: sequelize_1.default.STRING,
            lastName: sequelize_1.default.STRING,
            email: sequelize_1.default.STRING,
            arrayed: sequelize_1.default.ARRAY(sequelize_1.default.STRING),
        }, {});
    });
    describe('.isAdapterFor', () => {
        it('returns true when user gives entire db object generated by cli', () => {
            chai_1.expect(database_1.default.isAdapterFor(index_js_1.default)).to.equal(true);
        });
        it('returns true when user gives sequelize', function () {
            chai_1.expect(database_1.default.isAdapterFor(this.sequelize)).to.equal(true);
        });
    });
    describe('#resources', () => {
        it('fetches all resources when entire db is given', () => {
            const database = new database_1.default(index_js_1.default);
            chai_1.expect(database.resources()).to.have.lengthOf(Object.keys(index_js_1.default.sequelize.models).length);
            chai_1.expect(database.resources()[0]).to.be.an.instanceof(resource_1.default);
        });
        it('fetches all resources when user gives sequelize', function () {
            const database = new database_1.default(this.sequelize);
            chai_1.expect(database.resources()).to.have.lengthOf(1);
            chai_1.expect(database.resources()[0]).to.be.an.instanceof(resource_1.default);
        });
    });
});
